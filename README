
XML Transformer Tutorial

0. This file

This file is a supplementary document for the online
documentation of the XML_Transformer PEAR package. It is not a
comprehensive manual of methods and parameters, that's what the
PEAR online documentation is good for.

Instead, this document acts as a guide and tutorial to
XML_Transformer and friends. It aims to explain the architecture
of XML_Transformer and the choices that governed its design.
Also, it should contain a number of simple applications of
XML_Transformer to illustrate its typical use.

1. What is it good for?

The XML Transformer is a PEAR class that can be used to
transform XML files into other XML files. The transformation is
being specified using PHP functions.

We created XML Transformer, because we were annoyed with the
syntax and capabilities of XSLT. XSLT is a very verbose language
that needs many lines of text to express even the simplest of
algorithms. Also, XSLT is a functional language offering all the
drawbacks of languages of this class (variables are actually a
kind of constant, recursion is needed to express many loops etc)
without the advantages that come with such languages (closures,
functions as first-order datatypes etc). Finally, XSLT is badly
integrated into almost all development environments, offering
little in the way of character manipulation, and nothing in the
way to database access, image manipulation, flat file output
control and so on.

XML transformer can do many things that linear (non-reordering)
XSLT can. It can do some things XSLT can't (such as recursively
reparsing its own output), and it can utilize all PHP builting
functions and classes to do this. Transformations are specified
using the syntax of PHP, with which you already familiar, and
there is a simplified syntax to specify simple replacement
transformations that does not even need PHP at all.

Since XML Transformer uses a SAX parser to do its work, it
can't do anything a SAX parser can't do, that is, it cannot do
reordering transformations in a single pass. You won't be able
to generate indices, tables of contents and other summary
operations in a single pass. If you run into such problems,
think LaTeX and use the solutions LaTeX uses for this problems
as well. We are considering an implementation of XML Transformer
using a DOM parser and XPath queries to enable single pass
reordering operations in PHP as well.

2. What are all these files and classes?

2.1 XML_Transformer

The heart of the XML Transformer is defined in
XML/Transformer.php. All the work is being done within the
transform() method, which takes an XML string, transforms it and
returns the transformed result.

As transform() uses PHP's expat extension internally, the XML
string must be a well-formed XML fragment in order for the
transformation to work, that is, it must be starting with a tag
and ending with the same tag.

To set up a transformation, you need to create an instance of
the class XML_Transformer and then add options and
transformations to it.

  $t = new XML_Transformer();
  $t->setDebug(true);
  $t->overloadNamespace("php", new XML_Transformer_PHP);

Options are added using the set-type methods setDebug(),
setRecursiveOperation(), and setCaseFolding(). Transformations
are added using overloadNamespace(). All of these options and
then some can be set as parameters to the constructor. You'd be
using an array that is being passed to the c'tor for this.

  $t = new XML_Transformer(
         "debug" => true,
         "overloadedNamespaces" => array("php", new XML_Transformer_PHP)
       );

2.2 XML_Transformer_CallbackRegistry

Internally, XML Transformer uses to auxiliary classes to do its
work. One of them is the XML_Transformer_CallbackRegistry, which
does all the bookkeeping for XML_Transformer, tracking which
functions are to call for which namespace and so on.
XML_Transformer_CallbackRegistry is a Singleton, and the
instance is maintained automatically by XML_Transformer. You
never use it directly. 

2.3 XML_Transformer_Util

The other auxiliary class is actually only a function
collection, XML_Transformer_Util. As such, it does not have any
instances at all, but contains static methods, which can be
called by XML_Transformer or your own classes.

We offer the attributesToString() function, which returns a hash
of tag attributes (key, value) as a string that can be added to
your output.

  $att = array(
          "a" => "blah",
          "b" => "yak"
         );
  echo XML_Transformer_Util::attributesToString($att);
  /* prints
   *   a='blah' b='yak'
   */

Another function, qualifiedElement(), takes a tag name or
possibly a namespace:tag combination and returns an array of
namespace and tag name. If the tag name has no namespace, the
namespace is returned as '&MAIN'.

  list($namespace, $element ) = XML_Transformer_Util::qualifiedElement('img');
  /*
   * returns array('&MAIN', 'img');
   */


2.4 XML_Transformer_Namespace

Using XML_Transformer, all transformations are specified for
namespaces. You may specifiy transformations for the empty
namespace, that is, you may transform simple tags such as
<body/> or <p/>. The name of the empty namespace is '' or
'&MAIN'.

To make the defintion of namespaces easy, we supply a class
XML_Transformer_Namespace from which you can inherit. The class
is suitable for all non-nesting tags and the implementation
schema shown here are suitable for non-nesting tags such as
<img/> or <h1/>, but you'd need something more sophisticated to
implement a nesting structure such as <table/> which can contain
itself.

In order to define a tag called <tag />, you create a class and
implement functions called start_tag($attributes) and
end_tag($cdata). These functions must return the result of the
transformation as strings, and it must be a valid XML fragment.

class MyNamespace extends XML_Transformer_Namespace {
  var $tag_attributes = array();

  function start_tag($att) {
    $this->tag_attributes = $att;

    return "";
  }

  function end_tag($cdata) {
    if (isset($this->tag_attributes['name'])) {
      $name = $this->tag_attributes['name'];
      $thline = "<tr><th>$name</th></tr>";
    } else {
      $thline = "";
    }

    return "<table>$thline<tr><td>$cdata</td></tr></table>";
  }
}

This minimal sample implements a container tag called 
<...:tag name="headline" />, which places its content in a
table, and additionally supplied a table headline in a <th/>
cell if an attribute "name" is present.

The example is pretty much useless, but illustrates attribute
capture, access to the tags cdata content, and returning of
results. Also, it illustrates how easy namespaces are created by
inheriting from XML_Transformer_Namespace.

To activate the namespace and assign it a namespace prefix,
you'd use overloadNamespace():

  $t = new XML_Transformer(...);
  $t->overloadNamespace("my", new MyNamespace());

This tag can now be used as "<my:tag
name='heading'>content</my:tag>".

The XML_Transformer_Namespace class has two instance variables
which may come in handy in some cases. One of them is
_transformer, which is indeed a reference to the owning
transformer. The other is an array _prefix, which is an
enumeration of namespace prefixes of this namespace class. In
our example above, that array would have just one element,
$this->_prefix[0], and it would contain the string 'my'. As you
might have guessed from the fact that _prefix is an array, we
consider it legal to register a single namespace class under
multiple prefixes, if you can manage to keep your references
straight and not inadvertantly copy your instance.

We have not bothered to implement namespace scopes, though, as
we should have were we in the business of implementing the
complete XML specification.

2.5 supplied XML_Transformer Namespaces

* TODO (sb) autoloading

2.5.1 XML_Transformer_Namespace_PHP

* TODO (kk)

2.5.2 XML_Transformer_Namespace_Image

* TODO (kk)

2.6 XML_Transformer_Driver_Cache

* TODO (sb)

2.7 XML_Transformer_Driver_OutputBuffer

* TODO (any)

3. Debugging

* TODO (kk) entire section

3.1 The debugging filter

3.2 Debugging recursion

3.3 Debugging and the output buffer

4. Caching and XML_Transformer

* TODO (kk) entire section

4.1 Adressable and hidden caches

* Images and server fast path, cache must be below document root
* generated HTML and templates need not be addressable, outside
  document root

4.2 What caching is about

* Caching means NOT to work
* Cache keys determine the cached object,
  cache key must include all items that can cause the
  cached object to vary
* Cache keys should not be the cached object, that is,
  $key = md5($transformation_result) is useless.
* Do we need to clean out the cache?

* Caching fragments

4.3 How XML_Transformer_Namespace_Image uses caching

4.4 How XML_Transformer_Cache uses caching

4.5 How to deploy caching manually

